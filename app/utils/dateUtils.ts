// This whole file was generated by Cursor AI
import { DateTime } from "luxon";

// Convert a date string to DateTime in UTC for database storage
// Preserves the calendar date by setting time to noon UTC
export const stringToUTCDate = (
  date: string,
  format: string = "yyyy-MM-dd",
): Date => {
  // Parse the date in UTC and set to noon UTC to preserve the date
  const dt = DateTime.fromFormat(date, format, { zone: "UTC" }).set({
    hour: 12,
  });

  // Return as JS Date
  return dt.toJSDate();
};

// Convert a Date from database back to calendar date string
export const dateToString = (
  date: Date,
  format: string = "yyyy-MM-dd",
): string => {
  // Read the date as UTC and format it
  return DateTime.fromJSDate(date, { zone: "UTC" }).toFormat(format);
};

// // Convert UTC ISO string or Date to local time (for datetime values)
// export const utcToLocal = (
//   date: string | Date,
//   format: string = "yyyy-MM-dd HH:mm",
// ): string => {
//   const dt =
//     date instanceof Date ? DateTime.fromJSDate(date) : DateTime.fromISO(date);
//   return dt.isValid ? dt.toLocal().toFormat(format) : "";
// };

// // Convert local time to UTC (for datetime values)
export const localToUtc = (
  dateString: string,
  format: string = "yyyy-MM-dd'T'HH:mm",
): string => {
  const dt = DateTime.fromFormat(dateString, format);
  return dt.isValid ? dt.toUTC().toISO() : "";
};

// // Convert a local date (without time) to UTC for storage
// // Input: Date object or YYYY-MM-DD string
// export const dateOnlyToUtc = (date: Date | string): string => {
//   // If it's a Date object, it's already in UTC, just format it
//   if (date instanceof Date) {
//     const dt = DateTime.fromJSDate(date, { zone: "UTC" });
//     return dt.isValid ? dt.toFormat("yyyy-MM-dd") : "";
//   }

//   // For string input (from date picker), convert local to UTC
//   const dt = DateTime.fromFormat(date, "yyyy-MM-dd", { zone: "local" })
//     .startOf("day") // Start of day in local time
//     .toUTC(); // Convert to UTC

//   if (!dt.isValid) return "";
//   return dt.toFormat("yyyy-MM-dd");
// };

// // Convert a UTC date (without time) to local display format
// // Input: Date object or YYYY-MM-DD from UTC storage
// export const utcToDateOnly = (date: Date | string): string => {
//   // If it's a Date object from DB, it's in UTC
//   if (date instanceof Date) {
//     const dt = DateTime.fromJSDate(date, { zone: "UTC" });
//     return dt.isValid ? dt.toLocal().toFormat("yyyy-MM-dd") : "";
//   }

//   // For string input, parse as UTC and convert to local
//   const dt = DateTime.fromFormat(date, "yyyy-MM-dd", { zone: "UTC" });
//   if (!dt.isValid) return "";
//   return dt.toLocal().toFormat("yyyy-MM-dd");
// };

// // Get current time in user's timezone
// export const getCurrentLocalTime = (
//   format: string = "yyyy-MM-dd HH:mm",
// ): string => {
//   return DateTime.local().toFormat(format);
// };

// // Format relative time (e.g., "2 hours ago")
// export const getRelativeTime = (date: Date | string): string => {
//   const dt =
//     date instanceof Date ? DateTime.fromJSDate(date) : DateTime.fromISO(date);
//   const relative = dt.isValid ? dt.toRelative() : null;
//   return relative ?? "";
// };

// // Check if a date is in the past
// export const isInPast = (date: Date | string): boolean => {
//   const dt =
//     date instanceof Date ? DateTime.fromJSDate(date) : DateTime.fromISO(date);
//   return dt.isValid ? dt < DateTime.local() : false;
// };

// // Format date for specific timezone
// export const formatInTimezone = (
//   date: Date | string,
//   timezone: string,
//   format: string = "yyyy-MM-dd HH:mm",
// ): string => {
//   const dt =
//     date instanceof Date ? DateTime.fromJSDate(date) : DateTime.fromISO(date);
//   return dt.isValid ? dt.setZone(timezone).toFormat(format) : "";
// };

// Get user's timezone
export const getUserTimezone = (): string => {
  return DateTime.local().zoneName ?? "UTC";
};

// // Add duration to date
// export const addToDate = (
//   date: Date | string,
//   duration: { [key: string]: number },
// ): string => {
//   const dt =
//     date instanceof Date ? DateTime.fromJSDate(date) : DateTime.fromISO(date);
//   if (!dt.isValid) return "";
//   const newDate = dt.plus(duration).toISO();
//   return newDate ?? "";
// };

// // Parse any date string (more flexible than fromISO)
// export const parseAnyDate = (dateString: string): DateTime => {
//   const parsed =
//     DateTime.fromISO(dateString) ||
//     DateTime.fromRFC2822(dateString) ||
//     DateTime.fromHTTP(dateString) ||
//     DateTime.fromSQL(dateString);

//   return parsed.isValid ? parsed : DateTime.local();
// };
